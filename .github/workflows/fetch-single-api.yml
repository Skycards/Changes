name: Fetch Single API Data

on:
  workflow_call:
    inputs:
      api_url:
        description: "API endpoint URL (without timestamp parameter)"
        required: true
        type: string
      output_file:
        description: "Output filename for the JSON data"
        required: true
        type: string
      data_name:
        description: "Display name for the data type (for logging)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  fetch-single-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current timestamp
        id: timestamp
        run: echo "timestamp=$(date +%s%3N)" >> $GITHUB_OUTPUT

      - name: Fetch ${{ inputs.data_name }} data
        run: |
          echo "Fetching ${{ inputs.data_name }} from ${{ inputs.api_url }}?updatedAt=${{ steps.timestamp.outputs.timestamp }}"
          curl -s "${{ inputs.api_url }}?updatedAt=${{ steps.timestamp.outputs.timestamp }}" | jq '.' > ${{ inputs.output_file }}

      - name: Check for changes in ${{ inputs.output_file }}
        id: changes
        run: |
          if git diff --quiet HEAD ${{ inputs.output_file }}; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in ${{ inputs.output_file }}"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in ${{ inputs.output_file }}"
          fi

      - name: Commit ${{ inputs.output_file }} changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git add ${{ inputs.output_file }}
          git commit -m "chore(${{ inputs.data_name }}): update data - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          # Handle potential race condition from parallel matrix jobs
          for i in {1..3}; do
            if git push; then
              echo "Push successful on attempt $i"
              break
            else
              echo "Push failed on attempt $i, pulling latest changes..."
              git pull --rebase origin main
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Load webhook secrets
        if: steps.changes.outputs.changes == 'true'
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          prefix: WEBHOOK_

      - name: Send Discord webhook notifications
        if: steps.changes.outputs.changes == 'true'
        run: |
          //* Get the commit hash that was just pushed
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "Commit hash: $COMMIT_HASH"

          //* Capitalize the data name for display (more portable approach)
          DATA_NAME="${{ inputs.data_name }}"
          DATA_NAME_CAPITALIZED="$(echo ${DATA_NAME} | awk '{print toupper(substr($0,1,1)) substr($0,2)}')"

          //* Send to all configured webhooks
          for webhook_var in $(env | grep '^WEBHOOK_' | cut -d= -f1); do
            webhook_url=$(printenv "$webhook_var")
            if [ ! -z "$webhook_url" ]; then
              echo "Sending notification to $webhook_var"

              //* Create and send the webhook payload directly
              curl -X POST \
                   -H "Content-Type: application/json" \
                   -d '{
                     "content": "@everyone '"$DATA_NAME_CAPITALIZED"' have been updated!\nTake a look at the diff here:\nhttps://github.com/Skycards/Changes/commit/'"$COMMIT_HASH"'",
                     "embeds": null,
                     "username": "Skycards",
                     "avatar_url": "https://avatars.githubusercontent.com/u/224248835?s=256",
                     "attachments": []
                   }' \
                   "$webhook_url" || echo "Failed to send to $webhook_var"
            fi
          done

      - name: Log no changes for ${{ inputs.data_name }}
        if: steps.changes.outputs.changes == 'false'
        run: echo "No changes to commit. ${{ inputs.data_name }} data is up to date."
